package Basic;

// Java 자료형 : 원시형(PrimitiveType), 참조형(ReferenceType)
// 원시형 : 값을 표현 (int, long ...)
// 참조형 : 특정 대상을 표현하기 위한 자료형 (배열(Array), 클래스, 인터페이스, 나열형(Enum))

// 기본형 변수 : 원시형(기본형)으로 생성된 변수 -> 값을 저장하기위한 변수
// 참조형 변수 : 참조형으로 생성된 변수 -> 메모리 주소 저장(String)
// 힙영역에 생성된 배열 또는 객체의 메모리 주소를 저장하여 접은하기 위해 사용
// 참조변수는 비교연산자를 사용할 경우 메모리 주소를 비교하게 된다. 
// 참조변수의 배열 또는 객체를 저장하지 않을 경우 초기값으로 null을 저장
// 메소드 영역, 힙영역, 스택영역
// 1. 메소드 영역 : 클래스파일의 클래스 , 인터페이스, 나열(Enum)을 읽어 저장하는 영역
// 2. 힙영역 : 배열 또는 객체를 저장하기 위한 영역 -> new 연산자이용 
// 2. 힙영역 :  메모리에 이름설정불가 - > 참조변수에 메모리 주소 (hash code)를 저장하여 접근 -> FIFO
// 3. 스택영역 : 지역변수(기본 or 참조 변수)를 저장하기 위한 영역 -> FILO

// * 메소드영역과 스택영역은 메모리 이름이 있지만 힙 영역은 이름이없어 메모리 주소 사용

// 배열(Array) : 같은 자료형의 값을 여러개 저장하기 위한 메모리를 할당받기 위해 사용하는 자료형
// 일괄처리를 목적으로 사용하는 자료형 -> 배열의 사용 목적

// 배열 : 1차원 배열과 다차원(2,3차원) 배열로 구분한다
// 1차원 배열 : 다수의 값을 저장하기 위한 자료형, 다차원 배열 : 다수의 배열을 저장하기 위한 

public class _18_ArrayApp_0404 {

		
		// 1차원 배열을 생성하여 참조변수에 생성된 배열의 메모리 주소(hash code)를 저장
		// 형식 -> 자료형[] 참조변수 = new 자료형[갯수];
		// => new 자료형[갯수] : 자료형의 값을 갯수만큼 저장 가능한 메모리 할당 (배열)
		// => 자료형 [] 참조변수 : 1차원 배열의 메모리 주소를 저장하기 위한 참조변수 생성	
		// => "자료형 참조변수[]" 형식으로 참조변수 생성가능
		// 1차원 배열에서 값을 저장하기 위한 메모리 공간을 요소(Element)로 표현
		// => 배열의 요소는 첨자(Index(0부터 1씩 증가되는 정수 값))를 이용하여 구분
	
		// => 생성된 배열의 요소에는 기본값(초기값)이 자동저장된다.(숫자형: 0, 논리형: false, 참조형: null)
		
	
		
	public static void main(String[] args) {
		int[] num = new int[3]; //정수값 3개를 저장 할 수 있는 메모리를 만듦
		
		
	}

}
