package Basic;

// Java 자료형 : 원시형(PrimitiveType), 참조형(ReferenceType)
// 원시형 : 값을 표현 (int, long ...)
// 참조형 : 특정 대상을 표현하기 위한 자료형 (배열(Array), 클래스, 인터페이스, 나열형(Enum))

// 기본형 변수 : 원시형(기본형)으로 생성된 변수 -> 값을 저장하기위한 변수  ex) int num = 100;
// 참조형 변수 : 참조형으로 생성된 변수 -> 메모리 주소 저장(String)   ex) String name = "홍길동";
// 힙영역에 생성된 배열 또는 객체의 메모리 주소를 저장하여 접은하기 위해 사용
// 참조변수는 비교연산자를 사용할 경우 메모리 주소를 비교하게 된다. 
// 참조변수의 배열 또는 객체를 저장하지 않을 경우 초기값으로 null을 저장
// 메소드 영역, 힙영역, 스택영역
// 1. 메소드 영역 : 클래스파일의 클래스 , 인터페이스, 나열(Enum)을 읽어 저장하는 영역
// 2. 힙영역 : 배열 또는 객체를 저장하기 위한 영역 -> new 연산자이용 
// 2. 힙영역 :  ""메모리에 이름설정불가"" - > 참조변수에 메모리 주소 (hash code)를 저장하여 접근 -> FIFO
// 3. 스택영역 : 지역변수(기본 or 참조 변수)를 저장하기 위한 영역 -> FILO

// * 메소드영역과 스택영역은 메모리 이름이 있지만 힙 영역은 이름이없어 메모리 주소 사용

// 배열(Array) : 같은 자료형의 값을 여러개 저장하기 위한 메모리를 할당받기 위해 사용하는 자료형
// 일괄처리를 목적으로 사용하는 자료형 -> 배열의 사용 목적

// 배열 : 1차원 배열과 다차원(2,3차원) 배열로 구분한다
// 1차원 배열 : 다수의 값을 저장하기 위한 자료형, 다차원 배열 : 다수의 배열을 저장하기 위한 

public class _18_ArrayApp_0404 {

		
// 1차원 배열을 생성하여 참조변수에 생성된 배열의 메모리 주소(hash code)를 저장
// 형식 -> 자료형[] 참조변수 = new 자료형[갯수];
// => new 자료형[갯수] : 자료형의 값을 갯수만큼 저장 가능한 메모리 할당 (배열)
// => 자료형 [] 참조변수 : 1차원 배열의 메모리 주소를 저장하기 위한 참조변수 생성	
// => "자료형 참조변수[]" 형식으로 참조변수 생성가능
// 1차원 배열에서 값을 저장하기 위한 메모리 공간을 요소(Element)로 표현
// => 배열의 요소는 첨자(Index(0부터 1씩 증가되는 정수 값))를 이용하여 구분
	
// => 생성된 배열의 요소에는 기본값(초기값)이 자동저장된다.(숫자형: 0, 논리형: false, 참조형: null)
	
	
		
	public static void main(String[] args) {
		
		int[] num = new int[3]; //정수값 3개를 저장 할 수 있는 메모리를 만듦
		
		// 참조변수에 저장된 값을 출력할 경우 : "자료형@메모리주소" 형식의 문자열로 변환되어 출력된다.
		System.out.println(num);  // [I@58ceff1
		System.out.println("========================================");
		
		// 참조변수와 배열의 요소를 구분하는 첨자를 사용하여 배열요소에 접근 가능
		// 형식 : 참조변수[첨자] -> 배열의 요소를 표현하는 방법

		System.out.println(num[0]);  // 0
		System.out.println(num[1]);  // 0
		System.out.println(num[2]);  // 0
		// => 생성된 배열의 요소에는 기본값(초기값)이 자동저장된다.(숫자형: 0, 논리형: false, 참조형: null)
		
		// System.out.println(num[3]); 
		//  java.lang.ArrayIndexOutOfBoundsException
		// 배열의 요소를 구분하는 첨자를 잘못 사용한 경우
		// 예외(Exception)가 발생된 경우 프로그램 강제 종료 -> 예외 처리가 필요하다.
		
		System.out.println("========================================");
		
		// 참조변수 leght : 배열의 요소의 갯수를 제공하는 효현식
		System.out.println("num.leght = " + num.length);
		System.out.println("========================================");
		
		int index = 0;
		num[index] = 10;
		
		// 배열 요소를 구분하는 첨자는 변수 또는 연산식 사용가능
		num[index] = 10;
		num[index+1] = 20;
		num[index+2] = 30;
		
		// for 구문을 사용하여 배열요소에 대한 일괄처리 가능
		// => for 구문의 초기식; 조건식; 증감식에서 사용하는 변수를 첨자로 표현하여 일괄 처리
		
		for (int i = 0; i < num.length; i++)
		{
			System.out.println("num[" + i + "] = " + num[i]);
			

		}
		System.out.println("========================================");
		
		// 배열 생성시 배열 요소의 기본값 대신 원하는 초기값 저장도 가능하다.
		
		// *** 형식 : 자료형[] 참조변수 = new 자료형[] {초기값, 초기값,...}   ***힙영역에 생성됨
		// *** 형식 : 자료형[] 참조변수 = {초기값, 초기값,...} -> 이것도 가능(간단하게 표현)  ***메소드영역에 생성됨
		// 블럭 내부의 값을 나열하여 배열 생성 가능
		
		// => 블럭 내부에 나열된(작성된) 초기값의 갯수만큼 요소의 갯수를 가지고있는 배열생성
		 int[] s1 = new int[] {10, 20, 30};
		 
		 for (int i = 0; i < s1.length; i++) {
			 System.out.println("num[" + i + "] = " + s1[i]);
			 
		 }
		 System.out.println("========================================");
		 
		// 형식 : 자료형[] 참조변수 = {초기값, 초기값,...} -> 이것도 가능(간단하게 표현)  ***메소드영역에 생성됨
		 int[] s2 = {10, 20, 30};
		 
		 for (int i = 0; i < s2.length; i++) {
			 System.out.println("num[" + i + "] = " + s2[i]);
			
		 }
		 
		 System.out.println("========================================");
		 
		 // int[] s2 = {10, 20, 30};
		 // 위에서 커서를 사용해서 값을 변수에 가져온다음 커서가 다시 다음으로 이동해 또 가져온다.
		 
		 
		 // Java에서는 배열을 일관처리하기 위한 향상된 for 구문 제공
		 //*** 형식 : for(자료형 변수명 : 참조변수) {명령,명령, ....}
		 // => 참조변수의 배열에 요소값을 커서(cursor)를 사용하여 차례대로 하나씩 얻어와 변수에 저장하여 일괄처리
		 // => 배열에서 얻어올 요소값이 없는 경우 반복문이 종료된다.
		 // => 배열의 모든 요소값을 제공받은 후 반복문 종료
		 // => 계산, 출력에 대한 일괄처리만 가능 (입력은 불가능하다)
		 
		 // int[] s2 = {10, 20, 30};
		 for (int temp : s2) {
			 System.out.println(temp + "\t");
		 }
		 
		 System.out.println("========================================");
			 
			 int [] array = {54,56,24,11,56,34,25,16,49,84,26};
			 
			 // 배열의 모든 요소값의 합계를 계산하는 프로그램
			 int tot = 0;
			 
			 for (int i = 0;  i < array.length; i++) {
				 tot += array[i];
			 } System.out.println(tot);
		System.out.println("========================================");
			 
			 // 배열 요소값이 30~60범위의 정수값이 저장된 요소의 갯수를 출력
			 
			 int count = 0;
			  for (int element : array) {
				  if (element >= 30 && element <= 60) {
					  count++;
				  }
			  }
		System.out.println("30~60범위의 요소 갯수 = " + count);
		
		
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		 
	
	
	}

}
